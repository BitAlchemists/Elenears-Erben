TODO
====

1. Add job behaviors.

A job behavior augment a scheduled job by performing actions in response to changes in
the state of the job and steps in its lifecycle.  A simple behavior might automatically
delete a job in response to its trigger being stopped or might handle exceptional
cases when a job fails.  A behavior could also be used to notify other system components
reliably in response to events.

Job behaviors should be reliable.  That is, there is a guarantee that each behavior
will run when the event occurs.  If the behavior fails to run in one scheduler instance
then enough state is persisted such that another scheduler instance can pick up where
it left off.

A stateful behavior might be implemented as a serializable class.  An array of behavior
objects would be associated with the job in its JobSpec.  Alternately, a behavior would
be identified by its component key and carry its settings and state in JobData.

A job behavior might interact with the scheduler, trigger or job in various ways so it
requires enough context to be provided for such actions.

A simple implementation of serializable stateful behaviors might look like this:

[Serializable]
public abstract class JobBehavior
{
    public virtual void JobCreated(JobBehaviorContext context) {...}
    public virtual void JobDeleted(JobBehaviorContext context) {...}
    public virtual void JobStarted(JobBehaviorContext context) {...}
}

public class JobBehaviorContext
{
    public IScheduler Scheduler;
    public JobStatus JobStatus;
    public ILogger Logger;
}


2. Persistence of Job History.

It is often useful to store job history information in the Db.
There are lots of interesting design concerns here.


3. Job Queueing and Job Dependencies.

Sometimes we just want jobs to run sequentially either because they must negotiate
for mutually exclusive access to underlying resources or because they exhibit certain
inter-job dependencies.

Job dependencies can be used to simulate queueing behaviour but this is sometimes
undersirable.  In a typical situation involving dependencies we might want a job to fail
if at least one of its dependent jobs fails.  For queueing, we often don't care about
failure of prior jobs.

Another technique is to introduce Job Resource Allocation.


4. Job Resource Allocation

Usually we only want one instance of a given job to run at a time.  That situation
is easily accomodated simply by enforcing a one-to-one correspondence between job run
state and the job definition.  It is more difficult to describe that two different jobs
should not run concurrently because they require mutually exclusive access to some
resource.

The Eclipse job scheduler accomplishes this feat with the addition of Job Scheduling Rules
associated with each job.  The rules are used to identify conflicts between jobs a-priori
before they begin execution.  Such rules can be used to easily simulate queueing behavior
by forcing any of a group of jobs to contend for access to one shared resource and then
ensuring that jobs are released in FIFO order.


5. Integrate other schedulers like Quartz.Net or even out-of-process schedulers like ActiveBatch.


6. Refactor PeriodicTrigger to make it easier to specify different recurrence schedules.  A recurrence schedule might have an interface like this:

ICalendar or IDateSequence perhaps...
{
    bool IsInSequence(DateTime dateTime);
    DateTime GetSuccessor(DateTime dateTime);
    DateTime GetPredecessor(DateTime dateTime);
}


7. Provide a more natural means of specifying schedules.  eg. "every day at 12:00am", or "every monday, every tuesday, every thursday", or "01/01 3pm, 02/03 4pm", or "every day except saturday".


8. Allow jobs to update their displayed status in real-time.


9. Allow running jobs to be interrupted.  This requires some extra
API to support interruption and the addition of an optional IInterruptibleJob
interface (or similar) to allow jobs to control how they are interrupted.

