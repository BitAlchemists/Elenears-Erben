This proposition of your sound like a pretty decent solution.  


On 8/16/07, Jeff Brown <Jeff@ingenio.com> wrote: 
Oh come on guys.  There's an easy answer to this problem.
 
We cook up an IAbortableJob that extends IJob with an Abort() method.  Then the job can implement this method cooperatively to do whatever it needs to clean itself up gracefully.  If the job writer really thinks calling Thread.Abort() is the best thing, then we let them do that.

I like this.  This way I can just call Thread.CurrentThread.Abort() if I´m really stuck. Also give an opportunity to tidy a bit.



Putting jobs in separate AppDomains or processes to isolate it is a very heavyweight solution.  That said, there's no reason a Job can't fire its main task off in another AppDomain.  If that's the case then it can implement Abort() to call AppDomain.Unload()  (which will do the Thread.Abort() thing...)  Or it can shove it into another process and kill it as needed.  In principle we could facilitate isolated AppDomain or process execution of jobs by providing a new implementation of IJobRunner.

We could introduce an abstract AppDomainJob that implemets IAbortableJob that would launch in a separete AppDomain.  Possibly using a decorator pattern to take an arbitary IJob/IAbortableJob and wrap it an AppDomain. 

Having a AppDomainJobRunner would also be usefull for cases where all would be run in separate domains



The actual changes are as follows:
 
1. Declare IAbortableJob.  (better name anyone?)
2. IJobRunner gets an Abort() method.
3. DefaultJobRunner is augmented with handling for IAbortableJob and Abort().
4. JobState acquires an Aborting state.
5. IScheduler gets an AbortJob() method.
6. And some minor schema changes and additions to IJobStore are made to support aborting jobs across boundaries.
7. Add a new option in the JobSpec to control a built-in timeout mechanism based on this Abort() mechanism.

Might I suggest naming threads with the job name when launching.  This will do wonders when reading through cluttered log files.



How does that sound Freyr?  What's your timeline on this?

This is all good stuff.  I would say ASAP but the solution you suggest below will get me through this nicely so take your own time.



Jeff.
 
P.S.  In the meantime you could create a custom implementation of IJobRunner that maintains a timer to abort jobs when it looks like they have deadlocked.

Thanks guys,

regards,
Freyr 





--~--~---------~--~----~------------~-------~--~----~
You received this message because you are subscribed to the Google Groups "Castle Project Development List" group. 
To post to this group, send email to castle-project-devel@googlegroups.com 
To unsubscribe from this group, send email to castle-project-devel-unsubscribe@googlegroups.com 
For more options, visit this group at http://groups.google.com/group/castle-project-devel?hl=en 
-~----------~----~----~----~------~----~------~--~---

